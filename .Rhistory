gt_combined <- gt_combined[, -highly_correlated]
# Calculer la matrice de corrélation après suppression
cor_matrix_reduced <- cor(gt_combined[, numeric_columns_gt], use = "complete.obs")
# Créer la heatmap
plot_after <- ggcorrplot(cor_matrix_reduced, hc.order = TRUE, type = "upper", lab = TRUE,
title = "Correlation Matrix After")
# Sauvegarder le graphique dans un fichier JPG
cor_plot_file <- paste(plot_path, "correlation_matrix_gt_after.jpg", sep = "/")
ggsave(cor_plot_file, plot = plot_after, width = 8, height = 6)
#---------------------------------------------------------------------------------------------------------------------------
#GT DATA SET
# Charger les bibliothèques nécessaires
library(tidyverse)
library(caret)
library(ggcorrplot)
# Sélectionner les colonnes numériques
numeric_columns_gt <- sapply(gt_combined, is.numeric)
numeric_columns_gt <- names(gt_combined)[numeric_columns_gt]
# Sélectionner les colonnes numériques
numeric_columns_gt <- sapply(gt_combined, is.numeric)
# Récupérer les noms des colonnes numériques
numeric_columns_gt <- names(gt_combined)[numeric_columns_gt]
# Sélectionner les colonnes numériques
numeric_columns_gt <- sapply(gt_combined, is.numeric)
# Vérifiez les colonnes identifiées comme numériques
print(names(gt_combined)[numeric_columns_gt])
# Vérifiez les colonnes identifiées comme numériques
print(names(gt_combined)[numeric_columns_gt])
#---------------------------------------------------------------------------------------------------------------------------
#GT DATA SET
# Charger les bibliothèques nécessaires
library(tidyverse)
library(caret)
library(ggcorrplot)
# Sélectionner les colonnes numériques
numeric_columns_gt <- sapply(gt_combined, is.numeric)
# Vérifiez les colonnes identifiées comme numériques (valeurs de type logique)
print(numeric_columns_gt)
# Si tout semble correct, utiliser directement les noms des colonnes
numeric_columns_gt <- names(gt_combined)[numeric_columns_gt]
#---------------------------------------------------------------------------------------------------------------------------
#GT DATA SET
# Charger les bibliothèques nécessaires
library(tidyverse)
library(caret)
library(ggcorrplot)
# Sélectionner les colonnes numériques
numeric_columns_gt <- names(gt_combined)[sapply(gt_combined, is.numeric)]
print(numeric_columns_gt)
# Calculer la matrice de corrélation si les colonnes sont bien extraites
if(length(numeric_columns_gt) > 0) {
cor_matrix_gt <- cor(gt_combined[, numeric_columns_gt], use = "complete.obs")
# Identifier les colonnes fortement corrélées (corrélation > 0.8)
threshold <- 0.8
highly_correlated <- findCorrelation(cor_matrix_gt, cutoff = threshold)
# Supprimer les colonnes fortement corrélées
gt_combined <- gt_combined[, -highly_correlated]
# Calculer la matrice de corrélation après suppression
cor_matrix_reduced <- cor(gt_combined[, numeric_columns_gt], use = "complete.obs")
# Créer la heatmap
plot_after <- ggcorrplot(cor_matrix_reduced, hc.order = TRUE, type = "upper", lab = TRUE,
title = "Correlation Matrix After")
# Sauvegarder le graphique
plot_path <- "/path/to/your/directory"  # Remplacez par le chemin souhaité
cor_plot_file <- paste(plot_path, "correlation_matrix_gt_after.jpg", sep = "/")
ggsave(cor_plot_file, plot = plot_after, width = 8, height = 6)
} else {
message("Aucune colonne numérique trouvée.")
}
library(caret)
library(ggcorrplot)
#---------------------------------------------------------------------------------------------------------------------------
#GT DATA SET
# Charger les bibliothèques nécessaires
library(tidyverse)
# Sélectionner les colonnes numériques
numeric_columns_gt <- sapply(gt_combined, is.numeric)
# Vérifiez les colonnes identifiées comme numériques
numeric_columns_gt <- names(gt_combined)[numeric_columns_gt]
# Sélectionner les colonnes numériques
numeric_columns_gt <- sapply(gt_combined, is.numeric)
# Vérifiez les colonnes identifiées comme numériques
numeric_columns_gt_names <- names(gt_combined)[numeric_columns_gt]
# Sélectionner les colonnes numériques
numeric_columns_gt <- sapply(gt_combined, is.numeric)
# Vérifiez les colonnes identifiées comme numériques
print(numeric_columns_gt)
# Exploration initiale des données:
# Gas Turbine Dataset
summary(gt_combined)
# Vérifier les premières lignes du dataset
head(gt_combined)
# Combiner les jeux de données du Gas Turbine Dataset en un seul:
gt_combined <- rbind(gt_2011, gt_2012, gt_2013, gt_2014, gt_2015)
# Exploration initiale des données:
# Gas Turbine Dataset
summary(gt_combined)
#---------------------------------------------------------------------------------------------------------------------------
#GT DATA SET
# Charger les bibliothèques nécessaires
library(tidyverse)
library(caret)
library(ggcorrplot)
# Sélectionner les colonnes numériques
numeric_columns_gt <- sapply(gt_combined, is.numeric)
# Vérifiez les colonnes identifiées comme numériques
print(numeric_columns_gt)
# Convertir les indices logiques en noms de colonnes si nécessaire
numeric_columns_gt_names <- names(gt_combined)[numeric_columns_gt]
# Si des colonnes numériques sont bien identifiées
if(length(numeric_columns_gt_names) > 0) {
# Calculer la matrice de corrélation
cor_matrix_gt <- cor(gt_combined[, numeric_columns_gt_names], use = "complete.obs")
# Identifier les colonnes fortement corrélées (corrélation > 0.8)
threshold <- 0.8
highly_correlated <- findCorrelation(cor_matrix_gt, cutoff = threshold)
# Supprimer les colonnes fortement corrélées
gt_combined <- gt_combined[, -highly_correlated]
# Calculer la matrice de corrélation après suppression
cor_matrix_reduced <- cor(gt_combined[, numeric_columns_gt_names], use = "complete.obs")
# Créer la heatmap
plot_after <- ggcorrplot(cor_matrix_reduced, hc.order = TRUE, type = "upper", lab = TRUE,
title = "Correlation Matrix After")
# Sauvegarder le graphique
plot_path <- "/path/to/your/directory"  # Remplacez par le chemin souhaité
cor_plot_file <- paste(plot_path, "correlation_matrix_gt_after.jpg", sep = "/")
ggsave(cor_plot_file, plot = plot_after, width = 8, height = 6)
} else {
message("Aucune colonne numérique trouvée.")
}
#---------------------------------------------------------------------------------------------------------------------------
#GT DATA SET
# Charger les bibliothèques nécessaires
library(tidyverse)
library(caret)
library(ggcorrplot)
# Sélectionner les colonnes numériques
numeric_columns_gt <- sapply(gt_combined, is.numeric)
# Convertir les indices logiques en noms de colonnes si nécessaire
numeric_columns_gt_names <- names(gt_combined)[numeric_columns_gt]
# Si des colonnes numériques sont bien identifiées
if(length(numeric_columns_gt_names) > 0) {
# Vérifier les colonnes extraites
print(numeric_columns_gt_names)
# Calculer la matrice de corrélation
cor_matrix_gt <- cor(gt_combined[, numeric_columns_gt_names], use = "complete.obs")
# Identifier les colonnes fortement corrélées (corrélation > 0.8)
threshold <- 0.8
highly_correlated <- findCorrelation(cor_matrix_gt, cutoff = threshold)
# Supprimer les colonnes fortement corrélées
gt_combined <- gt_combined[, -highly_correlated]
# Calculer la matrice de corrélation après suppression
cor_matrix_reduced <- cor(gt_combined[, numeric_columns_gt_names], use = "complete.obs")
# Créer la heatmap
plot_after <- ggcorrplot(cor_matrix_reduced, hc.order = TRUE, type = "upper", lab = TRUE,
title = "Correlation Matrix After")
# Sauvegarder le graphique
plot_path <- "/path/to/your/directory"  # Remplacez par le chemin souhaité
cor_plot_file <- paste(plot_path, "correlation_matrix_gt_after.jpg", sep = "/")
ggsave(cor_plot_file, plot = plot_after, width = 8, height = 6)
} else {
message("Aucune colonne numérique trouvée.")
}
#---------------------------------------------------------------------------------------------------------------------------
#GT DATA SET
# Charger les bibliothèques nécessaires
library(tidyverse)
library(caret)
library(ggcorrplot)
# Sélectionner les colonnes numériques
numeric_columns_gt <- sapply(gt_combined, is.numeric)
# Convertir les indices logiques en noms de colonnes si nécessaire
numeric_columns_gt_names <- names(gt_combined)[numeric_columns_gt]
# Combiner les jeux de données du Gas Turbine Dataset en un seul:
gt_combined <- rbind(gt_2011, gt_2012, gt_2013, gt_2014, gt_2015)
# Convertir les indices logiques en noms de colonnes si nécessaire
numeric_columns_gt_names <- names(gt_combined)[numeric_columns_gt]
# Sélectionner les colonnes numériques
numeric_columns_gt <- sapply(gt_combined, is.numeric)
numeric_columns_gt_names <- names(gt_combined)[numeric_columns_gt]
# Vérifiez les colonnes extraites
print(numeric_columns_gt_names)
# Si des colonnes numériques sont bien identifiées
if(length(numeric_columns_gt_names) > 0) {
# Calculer la matrice de corrélation
cor_matrix_gt <- cor(gt_combined[, numeric_columns_gt_names, drop = FALSE], use = "complete.obs")
# Identifier les colonnes fortement corrélées (corrélation > 0.8)
threshold <- 0.8
highly_correlated <- findCorrelation(cor_matrix_gt, cutoff = threshold)
# Supprimer les colonnes fortement corrélées
gt_combined <- gt_combined[, -highly_correlated]
# Calculer la matrice de corrélation après suppression
cor_matrix_reduced <- cor(gt_combined[, numeric_columns_gt_names, drop = FALSE], use = "complete.obs")
# Créer la heatmap
plot_after <- ggcorrplot(cor_matrix_reduced, hc.order = TRUE, type = "upper", lab = TRUE,
title = "Correlation Matrix After")
# Sauvegarder le graphique
plot_path <- "/path/to/your/directory"  # Remplacez par le chemin souhaité
cor_plot_file <- paste(plot_path, "correlation_matrix_gt_after.jpg", sep = "/")
ggsave(cor_plot_file, plot = plot_after, width = 8, height = 6)
} else {
message("Aucune colonne numérique trouvée.")
}
#---------------------------------------------------------------------------------------------------------------------------
#GT DATA SET
# Charger les bibliothèques nécessaires
library(tidyverse)
library(caret)
library(ggcorrplot)
# Sélectionner les colonnes numériques
numeric_columns_gt <- sapply(gt_combined, is.numeric)
# Récupérer les noms des colonnes numériques
numeric_columns_gt_names <- names(gt_combined)[numeric_columns_gt]
# Vérifiez les colonnes extraites
print(numeric_columns_gt_names)
# Si des colonnes numériques sont bien identifiées
if(length(numeric_columns_gt_names) > 0) {
# Calculer la matrice de corrélation
cor_matrix_gt <- cor(gt_combined[, numeric_columns_gt_names, drop = TRUE], use = "complete.obs")
# Identifier les colonnes fortement corrélées (corrélation > 0.8)
threshold <- 0.8
highly_correlated <- findCorrelation(cor_matrix_gt, cutoff = threshold)
# Supprimer les colonnes fortement corrélées
gt_combined <- gt_combined[, -highly_correlated]
# Calculer la matrice de corrélation après suppression
cor_matrix_reduced <- cor(gt_combined[, numeric_columns_gt_names, drop = TRUE], use = "complete.obs")
# Créer la heatmap
plot_after <- ggcorrplot(cor_matrix_reduced, hc.order = TRUE, type = "upper", lab = TRUE,
title = "Correlation Matrix After")
# Sauvegarder le graphique
plot_path <- "/path/to/your/directory"  # Remplacez par le chemin souhaité
cor_plot_file <- paste(plot_path, "correlation_matrix_gt_after.jpg", sep = "/")
ggsave(cor_plot_file, plot = plot_after, width = 8, height = 6)
} else {
message("Aucune colonne numérique trouvée.")
}
# Calculer la matrice de corrélation
cor_matrix_gt <- cor(gt_combined[, numeric_columns_gt_names, drop = TRUE], use = "complete.obs")
# Identifier les colonnes fortement corrélées (corrélation > 0.8)
threshold <- 0.8
highly_correlated <- findCorrelation(cor_matrix_gt, cutoff = threshold)
# Supprimer les colonnes fortement corrélées
gt_combined <- gt_combined[, -highly_correlated]
# Calculer la matrice de corrélation après suppression
cor_matrix_reduced <- cor(gt_combined[, numeric_columns_gt_names, drop = TRUE], use = "complete.obs")
# Créer la heatmap
plot_after <- ggcorrplot(cor_matrix_reduced, hc.order = TRUE, type = "upper", lab = TRUE,
title = "Correlation Matrix After")
# Sauvegarder le graphique
plot_path <- "/path/to/your/directory"  # Remplacez par le chemin souhaité
cor_plot_file <- paste(plot_path, "correlation_matrix_gt_after.jpg", sep = "/")
ggsave(cor_plot_file, plot = plot_after, width = 8, height = 6)
# Exploration initiale des données:
# Gas Turbine Dataset
summary(gt_combined)
# Combiner les jeux de données du Gas Turbine Dataset en un seul:
gt_combined <- rbind(gt_2011, gt_2012, gt_2013, gt_2014, gt_2015)
# Exploration initiale des données:
# Gas Turbine Dataset
summary(gt_combined)
#---------------------------------------------------------------------------------------------------------------------------
#GT DATA SET
# Charger les bibliothèques nécessaires
library(tidyverse)
library(caret)
library(ggcorrplot)
# Sélectionner les colonnes numériques
numeric_columns_gt <- sapply(gt_combined, is.numeric)
# Récupérer les noms des colonnes numériques
numeric_columns_gt_names <- names(gt_combined)[numeric_columns_gt]
# Calculer la matrice de corrélation
cor_matrix_gt <- cor(gt_combined[, numeric_columns_gt_names, drop = TRUE], use = "complete.obs")
# Identifier les colonnes fortement corrélées (corrélation > 0.8)
threshold <- 0.8
highly_correlated <- findCorrelation(cor_matrix_gt, cutoff = threshold)
# Supprimer les colonnes fortement corrélées
gt_combined <- gt_combined[, -highly_correlated]
# Calculer la matrice de corrélation après suppression
cor_matrix_reduced <- cor(gt_combined[, numeric_columns_gt_names, drop = TRUE], use = "complete.obs")
# Créer la heatmap
cor_plot <- ggcorrplot(cor_matrix_reduced, hc.order = TRUE, type = "upper", lab = TRUE,
title = "Correlation Matrix After")
# Sauvegarder le graphique dans un fichier JPG
plot_path <- "/path/to/your/directory"  # Remplacez par le chemin souhaité
cor_plot_file <- paste(plot_path, "correlation_matrix_gt_after.jpg", sep = "/")
ggsave(cor_plot_file, plot = cor_plot, width = 8, height = 6)
# Sauvegarder le graphique dans un fichier JPG
plot_path <- "/Users/zahra/Desktop/4DS/sem1/Stat/StatsProjet/plots"  # Remplacez par le chemin souhaité
cor_plot_file <- paste(plot_path, "correlation_matrix_gt_after.jpg", sep = "/")
ggsave(cor_plot_file, plot = cor_plot, width = 8, height = 6)
#---------------------------------------------------------------------------------------------------------------------------
#GT DATA SET
# Charger les bibliothèques nécessaires
library(tidyverse)
library(caret)
library(ggcorrplot)
# Sélectionner les colonnes numériques
numeric_columns_gt <- sapply(gt_combined, is.numeric)
# Récupérer les noms des colonnes numériques
numeric_columns_gt_names <- names(gt_combined)[numeric_columns_gt]
# Calculer la matrice de corrélation
cor_matrix_gt <- cor(gt_combined[, numeric_columns_gt_names, drop = TRUE], use = "complete.obs")
# Identifier les colonnes fortement corrélées (corrélation > 0.8)
threshold <- 0.8
highly_correlated <- findCorrelation(cor_matrix_gt, cutoff = threshold)
# Supprimer les colonnes fortement corrélées
gt_combined <- gt_combined[, -highly_correlated]
# Calculer la matrice de corrélation après suppression
cor_matrix_reduced <- cor(gt_combined[, numeric_columns_gt_names, drop = TRUE], use = "complete.obs")
#---------------------------------------------------------------------------------------------------------------------------
#GT DATA SET
# Charger les bibliothèques nécessaires
library(tidyverse)
library(caret)
library(ggcorrplot)
# Sélectionner les colonnes numériques
numeric_columns_gt <- sapply(gt_combined, is.numeric)
# Récupérer les noms des colonnes numériques
numeric_columns_gt_names <- names(gt_combined)[numeric_columns_gt]
# Calculer la matrice de corrélation
cor_matrix_gt <- cor(gt_combined[, numeric_columns_gt_names, drop = TRUE], use = "complete.obs")
# Identifier les colonnes fortement corrélées (corrélation > 0.9)
threshold <- 0.9
highly_correlated <- findCorrelation(cor_matrix_gt, cutoff = threshold)
# Supprimer les colonnes fortement corrélées
gt_combined <- gt_combined[, -highly_correlated]
# Calculer la matrice de corrélation après suppression
cor_matrix_reduced <- cor(gt_combined[, numeric_columns_gt_names, drop = TRUE], use = "complete.obs")
#---------------------------------------------------------------------------------------------------------------------------
#GT DATA SET
# Charger les bibliothèques nécessaires
library(tidyverse)
library(caret)
library(ggcorrplot)
# Sélectionner les colonnes numériques
numeric_columns_gt <- sapply(gt_combined, is.numeric)
# Récupérer les noms des colonnes numériques
numeric_columns_gt_names <- names(gt_combined)[numeric_columns_gt]
# Exploration initiale des données:
# Gas Turbine Dataset
summary(gt_combined)
# Combiner les jeux de données du Gas Turbine Dataset en un seul:
gt_combined <- rbind(gt_2011, gt_2012, gt_2013, gt_2014, gt_2015)
# Exploration initiale des données:
# Gas Turbine Dataset
summary(gt_combined)
#---------------------------------------------------------------------------------------------------------------------------
#GT DATA SET
# Charger les bibliothèques nécessaires
library(tidyverse)
library(caret)
# Sélectionner les colonnes numériques
numeric_columns_gt <- sapply(gt_combined, is.numeric)
# Récupérer les noms des colonnes numériques
numeric_columns_gt_names <- names(gt_combined)[numeric_columns_gt]
# Calculer la matrice de corrélation
cor_matrix_gt <- cor(gt_combined[, numeric_columns_gt_names], use = "everything")
# Identifier les colonnes fortement corrélées (corrélation > 0.8)
threshold <- 0.8
highly_correlated <- findCorrelation(cor_matrix_gt, cutoff = threshold)
# Supprimer les colonnes fortement corrélées
gt_combined <- gt_combined[, -highly_correlated]
# Calculer la matrice de corrélation après suppression
cor_matrix_reduced <- cor(gt_combined[, numeric_columns_gt_names], use = "everything")
# Sélectionner les colonnes numériques
numeric_columns_gt <- sapply(gt_combined, is.numeric)
# Sélectionner les colonnes numériques
numeric_columns_gt <- sapply(gt_combined, is.numeric)
# Récupérer les noms des colonnes numériques
numeric_columns_gt_names <- names(gt_combined)[numeric_columns_gt]
# Vérifiez les colonnes extraites
print(numeric_columns_gt_names)
# Si des colonnes numériques sont bien identifiées
if(length(numeric_columns_gt_names) > 0) {
# Calculer la matrice de corrélation
cor_matrix_gt <- cor(gt_combined[, numeric_columns_gt_names, drop = TRUE], use = "everything")
# Identifier les colonnes fortement corrélées (corrélation > 0.8)
threshold <- 0.8
highly_correlated <- findCorrelation(cor_matrix_gt, cutoff = threshold)
# Supprimer les colonnes fortement corrélées
gt_combined <- gt_combined[, -highly_correlated]
# Calculer la matrice de corrélation après suppression
cor_matrix_reduced <- cor(gt_combined[, numeric_columns_gt_names, drop = TRUE], use = "everything")
# Créer la heatmap
cor_plot <- ggcorrplot(cor_matrix_reduced, hc.order = TRUE, type = "upper", lab = TRUE,
title = "Correlation Matrix After")
# Sauvegarder le graphique dans un fichier JPG
plot_path <- "/Users/zahra/Desktop/4DS/sem1/Stat/StatsProjet/plots"  # Remplacez par le chemin souhaité
cor_plot_file <- paste(plot_path, "correlation_matrix_gt_after.jpg", sep = "/")
ggsave(cor_plot_file, plot = cor_plot, width = 8, height = 6)
# Sauvegarder le graphique dans un fichier JPG
plot_path <- "/Users/zahra/Desktop/4DS/sem1/Stat/StatsProjet/plots/GT_Dataset\(matrix\ before\ and\ after\)"  # Remplacez par le chemin souhaité
# Sauvegarder le graphique dans un fichier JPG
plot_path <- "/Users/zahra/Desktop/4DS/sem1/Stat/StatsProjet/plots/GT_Dataset_matrix_before_and_after"  # Remplacez par le chemin souhaité
cor_plot_file <- paste(plot_path, "correlation_matrix_gt_after.jpg", sep = "/")
ggsave(cor_plot_file, plot = cor_plot, width = 8, height = 6)
# Sauvegarder le graphique dans un fichier JPG
plot_path <- "/Users/zahra/Desktop/4DS/sem1/Stat/StatsProjet/plots"  # Remplacez par le chemin souhaité
cor_plot_file <- paste(plot_path, "correlation_matrix_gt_after.jpg", sep = "/")
ggsave(cor_plot_file, plot = cor_plot, width = 8, height = 6)
# Sélectionner les colonnes numériques
numeric_columns_gt <- sapply(gt_combined, is.numeric)
# Récupérer les noms des colonnes numériques
numeric_columns_gt_names <- names(gt_combined)[numeric_columns_gt]
# Vérifiez les colonnes extraites
print(numeric_columns_gt_names)
# Si des colonnes numériques sont bien identifiées
if(length(numeric_columns_gt_names) > 0) {
# Calculer la matrice de corrélation
cor_matrix_gt <- cor(gt_combined[, numeric_columns_gt_names, drop = TRUE], use = "everything")
# Identifier les colonnes fortement corrélées (corrélation > 0.8)
threshold <- 0.8
highly_correlated <- findCorrelation(cor_matrix_gt, cutoff = threshold)
# Supprimer les colonnes fortement corrélées
gt_combined <- gt_combined[, -highly_correlated]
# Calculer la matrice de corrélation après suppression
cor_matrix_reduced <- cor(gt_combined[, numeric_columns_gt_names, drop = TRUE], use = "everything")
# Créer la heatmap
cor_plot <- ggcorrplot(cor_matrix_reduced, hc.order = TRUE, type = "upper", lab = TRUE,
title = "Correlation Matrix After")
# Sauvegarder le graphique dans un fichier JPG
plot_path <- "/Users/zahra/Desktop/4DS/sem1/Stat/StatsProjet/plots"  # Remplacez par le chemin souhaité
cor_plot_file <- paste(plot_path, "correlation_matrix_gt_after.jpg", sep = "/")
ggsave(cor_plot_file, plot = cor_plot, width = 8, height = 6)
# Sélectionner les colonnes numériques
numeric_columns_gt <- sapply(gt_combined, is.numeric)
# Récupérer les noms des colonnes numériques
numeric_columns_gt_names <- names(gt_combined)[numeric_columns_gt]
# Fonction pour supprimer les colonnes fortement corrélées
remove_highly_correlated <- function(data, threshold) {
cor_matrix <- cor(data, use = "everything")
highly_correlated <- findCorrelation(cor_matrix, cutoff = threshold)
if (length(highly_correlated) > 0) {
data <- data[, -highly_correlated]
return(remove_highly_correlated(data, threshold))
} else {
return(data)
}
}
# Supprimer les colonnes fortement corrélées
gt_combined <- remove_highly_correlated(gt_combined[, numeric_columns_gt_names], threshold = 0.8)
# Calculer la matrice de corrélation après suppression
cor_matrix_reduced <- cor(gt_combined, use = "everything")
# Créer la heatmap
cor_plot <- ggcorrplot(cor_matrix_reduced, hc.order = TRUE, type = "upper", lab = TRUE,
title = "Correlation Matrix After")
# Sauvegarder le graphique dans un fichier JPG
plot_path <- "/Users/zahra/Desktop/4DS/sem1/Stat/StatsProjet/plots"  # Remplacez par le chemin souhaité
cor_plot_file <- paste(plot_path, "correlation_matrix_gt_after.jpg", sep = "/")
ggsave(cor_plot_file, plot = cor_plot, width = 8, height = 6)
#---------------------------------------------------------------------------------------------------------------------------
#GT DATA SET
# Charger les bibliothèques nécessaires
library(tidyverse)
library(caret)
library(ggcorrplot)
# Sélectionner les colonnes numériques
numeric_columns_gt <- sapply(gt_combined, is.numeric)
# Récupérer les noms des colonnes numériques
numeric_columns_gt_names <- names(gt_combined)[numeric_columns_gt]
# Fonction pour supprimer les colonnes fortement corrélées
remove_highly_correlated <- function(data, threshold) {
cor_matrix <- cor(data, use = "everything")
highly_correlated <- findCorrelation(cor_matrix, cutoff = threshold)
if (length(highly_correlated) > 0) {
data <- data[, -highly_correlated]
return(remove_highly_correlated(data, threshold))
} else {
return(data)
}
}
# Supprimer les colonnes fortement corrélées
gt_combined <- remove_highly_correlated(gt_combined[, numeric_columns_gt_names], threshold = 0.8)
# Calculer la matrice de corrélation après suppression
cor_matrix_reduced <- cor(gt_combined, use = "everything")
# Créer la heatmap
cor_plot <- ggcorrplot(cor_matrix_reduced, hc.order = TRUE, type = "upper", lab = TRUE,
title = "Correlation Matrix After")
# Sauvegarder le graphique dans un fichier JPG
plot_path <- "/Users/zahra/Desktop/4DS/sem1/Stat/StatsProjet/plots"  # Remplacez par le chemin souhaité
cor_plot_file <- paste(plot_path, "correlation_matrix_gt_after.jpg", sep = "/")
ggsave(cor_plot_file, plot = cor_plot, width = 8, height = 6)
# Fonction pour supprimer les colonnes fortement corrélées
remove_highly_correlated <- function(data, threshold) {
cor_matrix <- cor(data, use = "everything")
highly_correlated <- findCorrelation(cor_matrix, cutoff = threshold)
if (length(highly_correlated) > 0) {
data <- data[, -highly_correlated]
return(remove_highly_correlated(data, threshold))
} else {
return(data)
}
}
# Supprimer les colonnes fortement corrélées
gt_combined <- remove_highly_correlated(gt_combined[, numeric_columns_gt_names], threshold = 0.8)
# Calculer la matrice de corrélation après suppression
cor_matrix_reduced <- cor(gt_combined, use = "everything")
# Créer la heatmap
cor_plot <- ggcorrplot(cor_matrix_reduced, hc.order = TRUE, type = "upper", lab = TRUE,
title = "Correlation Matrix After")
# Sauvegarder le graphique dans un fichier JPG
plot_path <- "/Users/zahra/Desktop/4DS/sem1/Stat/StatsProjet/plots"  # Remplacez par le chemin souhaité
cor_plot_file <- paste(plot_path, "correlation_matrix_gt_after.jpg", sep = "/")
ggsave(cor_plot_file, plot = cor_plot, width = 8, height = 6)
# Sauvegarder le graphique dans un fichier JPG
plot_path <- "~/Desktop/4DS/sem1/Stat/StatsProjet/plots"  # Chemin utilisateur sur Mac
cor_plot_file <- paste(plot_path, "correlation_matrix_gt_after.jpg", sep = "/")
ggsave(cor_plot_file, plot = cor_plot, width = 8, height = 6)
# Sauvegarder le graphique dans un fichier JPG
plot_path <- "/Users/zahra/Desktop/4DS/sem1/Stat/StatsProjet/plots"
cor_plot_file <- paste(plot_path, "correlation_matrix_gt_after.jpg", sep = "/")
ggsave(cor_plot_file, plot = cor_plot, width = 8, height = 6)
